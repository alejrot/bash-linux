{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bash &amp; GNU/Linux","text":""},{"location":"#bash","title":"Bash","text":"<p>Bash es la abreviaci\u00f3n de Bourne Again SHell. Es una shell de Unix, la cual es un macroprocesador que ejecuta comandos y es una de las terminales de uso m\u00e1s popular en Linux.</p>"},{"location":"#linux","title":"LINUX","text":"<p>El kernel Linux domina el mundo de los servidores. Tambi\u00e9n es el punto de partida para los despliegues basados en contenedores.</p> <p>En esta secci\u00f3n se exploran los aspectos vinculados a la administraci\u00f3n y despliegue basados en sistemas Linux.</p>"},{"location":"tags/","title":"Tags","text":"<p>Las etiquetas usadas aparecen a continuaci\u00f3n.</p>"},{"location":"tags/#tag:arch","title":"Arch","text":"<ul> <li>            Agregar servicios al inicio          </li> <li>            Se\u00f1ales          </li> </ul>"},{"location":"tags/#tag:bash","title":"Bash","text":"<ul> <li>            Argumentos de entrada          </li> <li>            Arrays          </li> <li>            Bucles          </li> <li>            Comandos de Bash          </li> <li>            Funciones          </li> <li>            Operaciones con strings          </li> <li>            Operadores          </li> <li>            Pipe          </li> <li>            Primeros comandos          </li> <li>            Saltos condicionales          </li> <li>            Scripts          </li> <li>            Streams          </li> <li>            Variables de entorno          </li> <li>            Variables de shell          </li> <li>            Verificar ficheros          </li> </ul>"},{"location":"tags/#tag:debian","title":"Debian","text":"<ul> <li>            Agregar servicios al inicio          </li> <li>            Se\u00f1ales          </li> </ul>"},{"location":"tags/#tag:fedora","title":"Fedora","text":"<ul> <li>            Agregar servicios al inicio          </li> <li>            DNF          </li> <li>            Se\u00f1ales          </li> </ul>"},{"location":"tags/#tag:gnu","title":"GNU","text":"<ul> <li>            Agregar servicios al inicio          </li> <li>            DNF          </li> <li>            Estructura de directorios en Linux          </li> <li>            Montar discos ISO          </li> <li>            PATH y Ejecutables          </li> <li>            Se\u00f1ales          </li> </ul>"},{"location":"tags/#tag:linux","title":"Linux","text":"<ul> <li>            Agregar servicios al inicio          </li> <li>            DNF          </li> <li>            Estructura de directorios en Linux          </li> <li>            Montar discos ISO          </li> <li>            PATH y Ejecutables          </li> <li>            Se\u00f1ales          </li> </ul>"},{"location":"bash/Bash/","title":"Bash","text":""},{"location":"bash/Bash/#truco-cambiar-la-ruta-del-ejecutable-por","title":"TRUCO: CAMBIAR LA RUTA DEL EJECUTABLE POR:","text":"<pre><code>#!/usr/bin/env bash\n</code></pre>"},{"location":"bash/Bash/#referencias","title":"referencias","text":"<p>tutorial Fazt</p> <p>live S4vitar</p> <p>Desafios: Over the Wire</p>"},{"location":"bash/argumentos/","title":"Argumentos de entrada","text":"<p>Se leen los primeros tres argumentos de entrada del script: <pre><code>echo $1 $2 $3 \n</code></pre> Leer todos los argumentos \\(\\rightarrow\\) usar el arroba: <pre><code>echo $@\n</code></pre> Contar todos los argumentos dados \\(\\rightarrow\\) usar el numeral: <pre><code>echo $#\n</code></pre> Cargar todos los argumentos a una lista: <pre><code>args=(\"$@\")\n</code></pre> Cargar el numero de argumentos a una variable: <pre><code>n=(\"$#\")\n</code></pre> Ejemplo: Cargar todos los argumentos a una lista y mostrarlos uno por uno <pre><code>#cargar todos los argumentos a una lista:\nargs=(\"$@\")\nn=(\"$#\")\n\nfor (( i=0 ; i &lt;n; i++ ))\ndo\n    echo \"$i --&gt; ${args[$i]}\"\ndone\n</code></pre></p>","tags":["Bash"]},{"location":"bash/arreglos/","title":"Arrays","text":"<p>Bash permite crear arrays con n\u00fameros y texto. </p>","tags":["Bash"]},{"location":"bash/arreglos/#creacion","title":"Creaci\u00f3n","text":"<p>Los valores se rodean entre par\u00e9ntesis: <pre><code>arreglo=( elemento_1  elemento_2  elemento_3 )\n</code></pre></p>","tags":["Bash"]},{"location":"bash/arreglos/#consulta","title":"Consulta","text":"<p>Para consultar un elemento particular en base a su \u00edndice se usan los corchetes: <pre><code>${arreglo[indice]}\n</code></pre> El primer elemento es el numero <code>0</code>. </p> <p>Para consultar todos los elementos del arreglo se usa como comodi\u00edn el asterisco (<code>*</code>) y el arroba (<code>@</code>):</p> <pre><code>${arreglo[*]}  \n${arreglo[@]}\n</code></pre>","tags":["Bash"]},{"location":"bash/arreglos/#indices-y-conteo","title":"\u00cdndices y conteo","text":"<p>El \u00edndice de todos los elementos se pide con la exclamaci\u00f3n (<code>!</code>) adelante del nombre de arreglo:</p> <pre><code>${!arreglo[*]}\n</code></pre> <p>en tanto que el conteo de elementos se hace con el numeral (<code>#</code>) precediendo el nombre:</p> <pre><code>${#arreglo[*]}\n</code></pre>","tags":["Bash"]},{"location":"bash/arreglos/#recorrido-de-arreglos","title":"Recorrido de arreglos","text":"<p>El arreglo se puede recorrer con un bucle <code>for</code> facilmente: <pre><code># despliegue del arreglo y lectura de elemento a elemento\nfor variable in ${arreglo[*]}\ndo\n    echo \"$variable\"\ndone\n</code></pre></p>","tags":["Bash"]},{"location":"bash/arreglos/#edicion-de-arreglos","title":"Edici\u00f3n de arreglos","text":"<p>Pueden a\u00f1adirse nuevos elementos al final: <pre><code>arreglo+=(nuevo_elemento)\n</code></pre> Tambi\u00e9n pueden insertarse elementos en lugares espec\u00edficos: <pre><code>arreglo[indice]=valor\n</code></pre></p> <p>La sustituci\u00f3n de elementos se consigue con ayuda del comando <code>declare</code>:</p> <pre><code>declare arreglo[indice]=valor\n</code></pre> <p>Los elementos se pueden eliminar con el comando <code>unset</code>: <pre><code>unset arreglo[indice]\n</code></pre></p>","tags":["Bash"]},{"location":"bash/arreglos/#conversion-a-arreglo","title":"Conversi\u00f3n a arreglo","text":"<p>Las variables de otros tipos se pueden convertir a array usando el comando <code>declare</code> con la opci\u00f3n <code>-a</code></p> <pre><code>declare -a variable\n</code></pre>","tags":["Bash"]},{"location":"bash/bucles/","title":"Bucles","text":"","tags":["Bash"]},{"location":"bash/bucles/#while","title":"While","text":"<pre><code>#IMPORTANTE: no dejar espacios en blanco al hacer asignaciones\nnumero=1      \nwhile [ $numero -lt 10 ]\ndo\n    echo  $numero\n    numero=$(( numero +1 )) #Incremento\ndone\n</code></pre>","tags":["Bash"]},{"location":"bash/bucles/#for","title":"For","text":"<p><pre><code>#IMPORTANTE: no dejar espacios en blanco al definir el rango\nfor i in {99..109}\ndo \n    echo $i\ndone\n</code></pre> Caso incremento no unitario: <pre><code>for i in {99..109..2}\ndo \n    echo $i\ndone\n</code></pre></p> <p><pre><code>for (( i=0; i &lt; 10; i++  ))\ndo \n    echo $i\ndone\n</code></pre> Ruptura del bucle (break) <pre><code>for (( i=0; i &lt; 10; i++  ))\ndo \n    if [ $i -gt 5 ]\n    then\n        break\n    fi\n    echo $i\ndone\n</code></pre></p>","tags":["Bash"]},{"location":"bash/comandos/","title":"Comandos de Bash","text":"","tags":["Bash"]},{"location":"bash/comandos/#uname","title":"uname","text":"","tags":["Bash"]},{"location":"bash/comandos/#pwd","title":"pwd","text":"","tags":["Bash"]},{"location":"bash/comandos/#cd","title":"cd","text":"","tags":["Bash"]},{"location":"bash/comandos/#chmod","title":"chmod","text":"","tags":["Bash"]},{"location":"bash/comandos/#chown","title":"chown","text":"","tags":["Bash"]},{"location":"bash/comandos/#touch","title":"touch","text":"","tags":["Bash"]},{"location":"bash/comandos/#mv-move","title":"mv (move)","text":"<p>Referencias: DelfStack - ...using MV command</p>","tags":["Bash"]},{"location":"bash/comandos/#cp-copy","title":"cp (copy)","text":"<p>Referencias: Ionos - comando CP de Linux </p> <p>https://itsfoss.com/es/comando-mv/</p>","tags":["Bash"]},{"location":"bash/comandos/#rm-remove-directory","title":"rm (remove directory)","text":"<p>Elimina archivos . Tambi\u00e9n sirve para la eliminaci\u00f3n recursiva de carpetas y su contenido.</p> <p>Eliminar archivos: <pre><code>rm ruta_archivo # elimina el archivo\n</code></pre></p> <p>Eliminar archivos (forzar): <pre><code>rm -f ruta_archivo # elimina el archivo (forma forzada)\n</code></pre></p> <p>Eliminar una carpeta y todo su contenido:</p> <p><pre><code>rm -r ruta_carpeta # elimina la carpeta y todo su contenido\n</code></pre> Eliminar archivos que comienzan con gui\u00f3n (-): <pre><code>rm -- archivo_guion\n</code></pre></p>","tags":["Bash"]},{"location":"bash/comandos/#mkdir-make-directory","title":"mkdir (make directory)","text":"<p>Crea una carpeta vac\u00eda. <pre><code>mkdir nombre_carpeta        # creacion en ruta actual\nmkdir ruta/nombre_carpeta   # creacion en ruta elegida\n</code></pre></p>","tags":["Bash"]},{"location":"bash/comandos/#rmdir","title":"rmdir","text":"<p>Elimina las carpetas indicadas en caso de que est\u00e9n vac\u00edas. <pre><code>rmdir &lt;carpeta&gt;\n</code></pre></p>","tags":["Bash"]},{"location":"bash/comandos/#ls","title":"ls","text":"","tags":["Bash"]},{"location":"bash/comandos/#wc","title":"wc","text":"<p>Comando word count Contar palabras: <pre><code>wc &lt;archivo_texto&gt;\n</code></pre> Contar filas de texto; <pre><code>wc -l &lt;archivo_texto&gt;\n</code></pre> Contar caracteres: <pre><code>wc -m &lt;archivo_texto&gt;\n</code></pre></p>","tags":["Bash"]},{"location":"bash/comandos/#find","title":"find","text":"<p>Buscar recursivamente archivos con extension </p> <pre><code>find ruta -type f -name \"*.&lt;extension&gt;\"\n\n# Ejemplo: buscar archivos con extension MD\nfind . -type f -name '*.md'\n</code></pre> <p>Referencias: Digital Ocean - como usar Find y Locate en Linux </p>","tags":["Bash"]},{"location":"bash/comandos/#basename","title":"basename","text":"","tags":["Bash"]},{"location":"bash/comandos/#awk","title":"awk","text":"<p>https://geekland.eu/uso-del-comando-awk-en-linux-y-unix-con-ejemplos/</p>","tags":["Bash"]},{"location":"bash/comandos/#grep","title":"grep","text":"<p>https://www.hostinger.es/tutoriales/comando-grep-linux</p>","tags":["Bash"]},{"location":"bash/comandos/#sed","title":"sed","text":"<p>https://www.hostinger.es/tutoriales/el-comando-sed-de-linux-usos-y-ejemplos/</p>","tags":["Bash"]},{"location":"bash/comandos/#exec","title":"exec","text":"<p>https://es.linux-console.net/?p=13564</p>","tags":["Bash"]},{"location":"bash/comandos/#curl","title":"Curl","text":"<p>Curl es un comando que permite hacer peticiones de distintos protocolos y se usa mucho para HTTP. Se usa: <pre><code>curl &lt;url_servidor&gt;\n</code></pre> Para ver s\u00f3lo los headers de la url <pre><code>curl -I &lt;url_servidor&gt;\n</code></pre> Para ver headers y contenido: <pre><code>curl -i &lt;url_servidor&gt;\n</code></pre></p>","tags":["Bash"]},{"location":"bash/comenzar/","title":"Primeros comandos","text":"","tags":["Bash"]},{"location":"bash/comenzar/#terminales-en-linux","title":"Terminales en linux","text":"<p>Conocer las rutas a las terminales disponibles en la distribuci\u00f3n Linux usada: <pre><code>cat /etc/shells \n</code></pre> Verificar la terminal en uso <pre><code>echo $SHELL\n</code></pre> Mostrar un texto en la terminal: <pre><code>echo \"mi_texto\"\n</code></pre></p>","tags":["Bash"]},{"location":"bash/comenzar/#guardar-texto-desde-terminal","title":"Guardar texto desde terminal","text":"<p>Guardar un texto corto en archivo: <pre><code>echo \"&lt; mi texto&gt;\" &gt; nombre_archivo.txt\n</code></pre> Preparar un archivo script que guarde un texto ingresado desde terminal: <pre><code>#! &lt;ruta_terminal&gt;\ncat &gt;  &lt;archivo_texto&gt;\n</code></pre> Entonces al abrir el ejecutable desde la terminal: <pre><code>./&lt;script.sh&gt;\n</code></pre> se guardar\u00e1 todo lo escrito en ella cada vez que se pulse 'ENTER' hasta que la terminal se cierre. Esto puede hacerse con 'Ctrl' + 'C'.</p> <p>El texto ingresado modificar\u00e1 al anterior. Para que el texto se a\u00f1ada al final del archivo se usa '&gt;&gt;': <pre><code>#! &lt;ruta_terminal&gt;\ncat &gt;&gt;  &lt;archivo_texto&gt;\n</code></pre></p>","tags":["Bash"]},{"location":"bash/comenzar/#delimitador-cat","title":"Delimitador Cat","text":"<p>El comando 'cat' sirve tambi\u00e9n para presentar un mensaje en la terminal usando ''&lt;&lt;'' <pre><code>cat &lt;&lt; &lt;delimitador&gt;\n&lt;mensaje&gt;\n&lt;delimitador&gt;\n</code></pre> Ejemplo de uso: <pre><code>cat &lt;&lt; miTexto\nLos hermanos sean unidos\nesa es la ley primera\nque si entre ellos se pelean \nno pueden compartir la cuenta de Netflix\nmiTexto\n</code></pre></p>","tags":["Bash"]},{"location":"bash/entorno/","title":"Variables de entorno","text":"<p>Las variables de entorno son variables que no s\u00f3lo est\u00e1n disponibles en la shell/proceso actual sino que tambi\u00e9n est\u00e1n disponibles para los procesos \"hijos\", es decir los programas derivados del principal.</p>","tags":["Bash"]},{"location":"bash/entorno/#definicion-basica","title":"Definici\u00f3n b\u00e1sica","text":"<p>A las variables de shell se las puede convertir en variables de </p> <p>La exportaci\u00f3n de las variables se realiza</p> <pre><code>export VARIABLE=valor\n</code></pre> <p>La variable se puede exportar vac\u00eda.</p> <pre><code>export VARIABLE\n</code></pre>","tags":["Bash"]},{"location":"bash/funciones/","title":"Funciones","text":"","tags":["Bash"]},{"location":"bash/funciones/#definicion","title":"Definici\u00f3n","text":"<p>La funci\u00f3n se define con la cl\u00e1usula <code>function</code>:</p> <p><pre><code>function nombre_funcion(){\n    rutina\n}\n</code></pre> Si se necesitan argumentos estos no se escriben entre los par\u00e9ntesis sino que se leen de forma numnerada: $1, $2, etc.</p> <pre><code>function nombre_funcion(){\n    variable_1=$1\n    variable_2=$2\n    ...\n    rutina\n}\n</code></pre>","tags":["Bash"]},{"location":"bash/funciones/#llamado","title":"Llamado","text":"<p>LLamar a la funci\u00f3n se escribe su nombre, sin par\u00e9ntesis y con los argumentos necesarios a continuaci\u00f3n, separados por espacios:</p> <pre><code>nombre_funcion  argumento_1  argumento_2\n</code></pre>","tags":["Bash"]},{"location":"bash/funciones/#variables-locales","title":"Variables locales","text":"<p>Las variables internas de las funciones son globales, por tanto pueden ser afectadas por rutinas externas.  Para evitar problemas las variables se pueden declarar como locales:</p> <pre><code>local variable\n</code></pre>","tags":["Bash"]},{"location":"bash/operadores/","title":"Operadores","text":"","tags":["Bash"]},{"location":"bash/operadores/#operaciones-aritmeticas","title":"Operaciones Aritmeticas","text":"<p>Bash soporta expresiones aritm\u00e9ticas </p> <p>Numeros enteros <pre><code>suma=$(( x+y ))\nresta=$(( x-y ))\nmiltiplicacion=$(( x*y ))\ncociente=$(( x/y ))\nresto=$(( x%y ))\n</code></pre> Las operaciones tambi\u00e9n pueden hacerse sobre variables, leyendo su valor interno: <pre><code>incremento=$(1+$variable)\ntriple=$(3*$variable)\n</code></pre></p> <p>Notaci\u00f3n equivalente: <pre><code>$(expr $x + $y )\n$(expr $x - $y )\n$(expr $x \\* $y )\n$(expr $x / $y )\n$(expr $x % $y )\n</code></pre></p> <p>N\u00fameros flotantes</p> <p>Bash NO soporta operaciones con numeros flotantes por defecto; sin embargo existen paquetes con comandos adicionales para a\u00f1adir esta funcionalidad.</p>","tags":["Bash"]},{"location":"bash/operadores/#operadores-relacionales","title":"Operadores relacionales","text":"<p>Las condiciones se escriben entre corchetes y con las variables precedidas con el signo <code>$</code>.  Algunos operadores relacionales usados son:</p> Operador Descripcion <code>lt</code> menor que (lesser than) <code>le</code> menor o igual (less or equal) <code>eq</code> igual (equal) <code>ne</code> no igual  (not equal) <code>ge</code> mayor o igual (greater or equal) <code>gt</code> mayor que (greather than) <p>Ejemplo uso:</p> <p><pre><code>[ $age -le 21 ]\n</code></pre> Con esta notaci\u00f3n hay que tener cuidado de dejar espacios entre los corchetes y los elementos internos.</p> <p>Una alternativa es el uso del comando test:</p> <pre><code>test $age -ne 21  # uso 'test'\n</code></pre> <p>Para usar los s\u00edmbolos de asignaci\u00f3n habituales de los lenguajes de programaci\u00f3n y no requerir el signo <code>$</code> se puede escribir el condicional entre doble par\u00e9ntesis:</p> <pre><code>((age &lt;= 21))        # doble par\u00e9ntesis\n</code></pre>","tags":["Bash"]},{"location":"bash/operadores/#operadores-logicos","title":"Operadores Logicos","text":"Simbolo Operador <code>&amp;&amp;</code> AND <code>||</code> OR <p>en algunos casos se puede usar:</p> <p>| <code>-o</code> | OR |</p> <p>TIP: ver resultado de operadores relacionales</p> <p>El resultado se puede comprobar agregando la secuencia:</p> <pre><code>((age &lt;= 21))  &amp;&amp; echo \"true\" || echo \"false\"\n</code></pre> <pre><code>test $age -le 21 &amp;&amp; echo \"true\" || echo \"false\"\n</code></pre> <p>Los operadores relacionales dan  el valor <code>0</code> cuando la condici\u00f3n se cumple  y <code>1</code> cuando no.</p> <p><pre><code>age=35\ntest $age -le 21 &amp;&amp; echo $? || echo $?      # '1'\n</code></pre> <pre><code>age=8\ntest $age -le 21 &amp;&amp; echo $? || echo $?      # '0'\n</code></pre></p>","tags":["Bash"]},{"location":"bash/operadores/#referencias","title":"Referencias:","text":"<p>Linux Handbook - Using test Command in Bash Scripts</p>","tags":["Bash"]},{"location":"bash/pipes/","title":"Pipe","text":"<p>La tuber\u00eda (pipe) es un elemento auxiliar que permite concatenar comandos,  esto es ejecutar un comando y pasar su resultado como argumento para el siguiente,  separando los comandos con la barra vertical (signo <code>|</code>). </p> <p>Sintaxis general:</p> <p><pre><code>primer_comando | segundo_comando | tercer_comando | ...\n</code></pre> Ejemplo: contar las filas que arroja el comando ls: <pre><code>ls | wc -l  \n</code></pre></p> <p>listar archivos del directorio y ordenarlos en base a la columna N\u00ba5: <pre><code>ls -l | sort -k5        #orden ascendente\nls -l | sort -k5 -rn    #orden descendente\n</code></pre> Los pipes pueden usarse dentro de rutinas. Ejemplo: contar el numero de caracteres de una variable: <pre><code>MENSAJE=\"hola mundo\"\necho $MENSAJE | wc -m\n</code></pre></p>","tags":["Bash"]},{"location":"bash/saltos/","title":"Saltos condicionales","text":"","tags":["Bash"]},{"location":"bash/saltos/#condicional-if","title":"Condicional 'if'","text":"","tags":["Bash"]},{"location":"bash/saltos/#if","title":"if","text":"<p><pre><code>if &lt;condicion&gt;\nthen \n    &lt;accion&gt;\nfi\n</code></pre> Ejemplo uso - corchetes:</p> <p><pre><code>if [ $age -le 21 ]\nthen \n    echo \"A dormir!\"\nfi\n</code></pre> Ejemplo alternativo - test: <pre><code>if test age &lt;= 21\nthen \n    echo \"A dormir!\"\nfi\n</code></pre></p> <p>Ejemplo alternativo - doble par\u00e9ntesis: <pre><code>if ((age &lt;= 21)) \nthen \n    echo \"A dormir!\"\nfi\n</code></pre></p>","tags":["Bash"]},{"location":"bash/saltos/#if-else","title":"if - else","text":"<pre><code>if [ $age -le 21 ]\nthen \n    echo \"A dormir!\"\nelse \n    echo \"Adelante caballero\"\nfi\n</code></pre>","tags":["Bash"]},{"location":"bash/saltos/#if-elif-else","title":"if - elif - else","text":"<pre><code>if [ $age -le 13 ]\nthen \n    echo \"A dormir,  ni\u00f1ato!\"\nelif [ $age -le 21 ]\nthen\n    echo \"A dormir, mozalbete!\"\nelse \n    echo \"Adelante caballero\"\nfi\n</code></pre>","tags":["Bash"]},{"location":"bash/saltos/#case","title":"Case","text":"<pre><code>#...\ncase $valor in\n    1)                  ## valor == 1\n    echo \"Opcion 1\"\n    ;;                  ## escape (\"break\")\n    2)                  ## valor == 2\n    echo \"Opcion 2\"\n    ;;                  ## escape (\"break\")\n    *)                  ## otros valores\n    echo \"Opcion indeterminada\"\n    ;;\nesac\n</code></pre>","tags":["Bash"]},{"location":"bash/scripts/","title":"Scripts","text":"","tags":["Bash"]},{"location":"bash/scripts/#script-hola-mundo","title":"Script Hola Mundo!","text":"<p>Directorio actual: <pre><code>pwd\n</code></pre> Crear un directorio <pre><code>mkdir &lt;nombre-carpeta&gt;\n</code></pre> Moverse a un subdirectorio <pre><code>cd &lt;nombre-carpeta&gt;\n</code></pre> Crear un archivo ejecutable por la terminal: <pre><code>touch &lt;archivo.sh&gt;\n</code></pre> la terminaci\u00f3n .sh es por convenci\u00f3n.</p> <p>Importante: Dentro del archivo SIEMPRE escribir como primera linea la ruta a la terminal: <pre><code>#! &lt;ruta_terminal&gt;\n</code></pre> y a continuaci\u00f3n el resto de comandos.</p> <p>Ejemplo en Windows: <pre><code>#! /usr/bin/bash\necho \"Hallo Welt!\"\n</code></pre> Ejemplo en Linux: <pre><code>#! /bin/bash\necho \"Hallo Welt!\"\n</code></pre></p>","tags":["Bash"]},{"location":"bash/scripts/#permisos-de-ejecucion","title":"permisos de ejecuci\u00f3n","text":"<p>Verificar las propiedades de los archivos se puede usar el comando: <pre><code>ls -al\n</code></pre> Dar permisos de ejecuci\u00f3n al archivo: <pre><code>chmod +x nombre_archivo.sh\n</code></pre> Ejecutar el archivo: <pre><code>./&lt;archivo.sh&gt;\n</code></pre></p> <p>Quitar permisos de ejecuci\u00f3n al archivo: <pre><code>chmod -x nombre_archivo.sh\n</code></pre></p>","tags":["Bash"]},{"location":"bash/scripts/#comentarios","title":"Comentarios","text":"<p>Los comentarios de una l\u00ednea comienzan en numeral (#): <pre><code># Un comentario breve\n</code></pre> Los comentarios de varias l\u00edenas empoiezan en dos puntos, espacio y comilla simple (: ') y terminan en comilla simple ('): <pre><code>: 'Si la virtud de la brevedad no tener\ndos puntos, espacio y comillas usar'\n</code></pre></p>","tags":["Bash"]},{"location":"bash/scripts/#concatenando-scripts-importacion-y-exportacion","title":"Concatenando Scripts - Importaci\u00f3n y Exportaci\u00f3n","text":"<p>En este ejemplo se crean dos archivos de script llamados \"primero.sh\" y \"segundo.sh\" almacenados en un mismo directorio</p> <p>Primer archivo:</p> <p><pre><code>#se crea y exporta una variable\nMENSAJE=\"Yo soy Sam\"\nexport MENSAJE     \n\n#se invoca al otro ejecutable\n./segundo.sh\n</code></pre> Segundo archivo:</p> <pre><code>echo \"Leer mensaje:\"\necho \"$MENSAJE\"\n</code></pre>","tags":["Bash"]},{"location":"bash/scripts/#debugging","title":"Debugging","text":"<p>El debug (ejecuci\u00f3n paso a paso) de una rutina completa se la puede hacer con la opcion x: <pre><code>bash -x &lt;rutina&gt;.sh\n</code></pre> Para poner a prueba s\u00f3lo un trozo de rutina \u00e9sta se puede marcar dentro del archivo entre los comandos \"set -x\" y \"set +x\": <pre><code>set -x\n&lt;rutina a debuguear&gt;\nset +x\n</code></pre></p>","tags":["Bash"]},{"location":"bash/streams/","title":"Streams","text":"","tags":["Bash"]},{"location":"bash/streams/#stdin","title":"stdin","text":"<p>stdin es el \"Standard Input\" y se encarga de manejar la entrada de datos por teclado.  Es el stream estandar numero 0.  En Linux y MAC el archivo de stdin se encuentra habitualmente en la ruta <code>/dev/stdin</code>.</p> <p>Ejemplo de uso: se lee l\u00ednea a l\u00ednea la entrada de texto y se la deriva al servicio stdin <pre><code>#se lee l\u00ednea a l\u00ednea la entrada de texto y se la deriva al servicio stdin\nwhile read linea\ndo \n    echo linea\ndone &lt; \"${1:/dev/stdin}\" #Linux / MAC\n</code></pre> en Windows: http://steve-jansen.github.io/guides/windows-batch-scripting/part-4-stdin-stdout-stderr.html</p>","tags":["Bash"]},{"location":"bash/streams/#stdout-y-stderr","title":"stdout y stderr","text":"<p>stdout es el Standard Output (stream 1 )  en tanto que stderr es el Standard Error (stream 2). </p> <p>Ejemplo: guardado de resultados del comando \"ls\" en dos archivos de texto <pre><code>ls -l 1&gt;salida.txt 2&gt;errores.txt \n</code></pre></p> <p>Guardado de resultados en un mismo archivo con los errores al comienzo  <pre><code>ls -l 1&gt;resultado.txt 2&gt;&amp;1\n</code></pre> Lo mismo con notaci\u00f3n m\u00e1s sencilla <pre><code>ls -l &gt;&amp; resultado.txt \n</code></pre></p>","tags":["Bash"]},{"location":"bash/strings/","title":"Operaciones con strings","text":"","tags":["Bash"]},{"location":"bash/strings/#comparar","title":"Comparar","text":"<p>Las cadenas de caracteres se pueden comparar haciendo la conversi\u00f3n de sus valores a texto:</p> <p><pre><code>if [ \"$input1\" = \"$input2\" ] \nthen\n    echo \"iguales\"\nelse\n    echo \"distintas\"\nfi\n</code></pre> Una alternativa es colocar el condicional entre dobles corchetes:</p> <pre><code>if [[ $input1 = $input2 ]] \nthen\n    echo \"iguales\"\nelse\n    echo \"distintas\"\nfi\n</code></pre>","tags":["Bash"]},{"location":"bash/strings/#editar","title":"Editar","text":"","tags":["Bash"]},{"location":"bash/strings/#concatenar-strings","title":"Concatenar Strings","text":"<p>Se leen los valores de los strings y se juntan con comillas: <pre><code>resultado=\"$cadena1 $cadena2\"\n</code></pre></p>","tags":["Bash"]},{"location":"bash/strings/#rebanado-slicing","title":"Rebanado (slicing)","text":"<p>El rebanado es la selecci\u00f3n de un tramo del string que comienza en el \u00edndice de inicio indicado y cuya longitud tiene la cantidad de caracteres pedidos. Si no se indica el numero de caracteres el rebanado llegan hasta el final.</p> <pre><code># desde el indice hasta el final\nseleccion=${cadena:indice_inicio}     \n# s\u00f3lo N carateres desde el indice\nseleccion=${cadena:indice_inicio:nro_caracteres}\n</code></pre> <p>Importante: el primer elemento es el numero cero.</p>","tags":["Bash"]},{"location":"bash/strings/#reemplazar-palabras","title":"Reemplazar palabras","text":"<p>Se indican el valor de la palabra y  de su reemplazo con barras adelante:</p> <pre><code>cadena_editada=${cadena/$palabra/$reemplazo}     \n</code></pre>","tags":["Bash"]},{"location":"bash/strings/#borrar-secuencias","title":"Borrar secuencias","text":"<p>Se puede borrar la secuencia indicada tras la doble barra (//)</p> <pre><code>cadena_editada=${cadena//$secuencia}     \n</code></pre>","tags":["Bash"]},{"location":"bash/strings/#convertir-a-minusculas","title":"Convertir a Min\u00fasculas","text":"<pre><code>texto=${texto,,}            #todo\ntexto=${texto,,[AEIOU]}     #solo convierte vocales\n</code></pre>","tags":["Bash"]},{"location":"bash/strings/#convertir-a-mayusculas","title":"Convertir a May\u00fasculas","text":"<pre><code>texto=${texto^^}          #todo   \ntexto=${texto^^[aeiou]}   #solo convierte vocales minusculas\n</code></pre>","tags":["Bash"]},{"location":"bash/strings/#eliminar-hasta-encontrar-caracter","title":"Eliminar hasta encontrar caracter","text":"<pre><code>cadena_editada=\"${cadena##*&lt;caracter&gt;}\"     \n</code></pre> <p>Ejemplo: extension y nombre de archivo desde ruta <pre><code>ruta=\"/home/usuario/nombre_archivo.txt\"\narchivo=\"${ruta##*/}\"       # borrado hasta ultima barra\nextension=\"${ruta##*.}\"     # borrado hasta \u00faltimo punto\n</code></pre></p>","tags":["Bash"]},{"location":"bash/strings/#eliminar-a-partir-del-caracter","title":"Eliminar a partir del caracter","text":"<pre><code>cadena_editada=\"${cadena%&lt;caracter&gt;*}\"     \n</code></pre> <p>Ejemplo: extension y nombre de archivo desde ruta <pre><code>ruta=\"/home/usuario/nombre_archivo.txt\"\nruta_padre=\"${ruta%/*}\"     # borrado desde ultima barra\n</code></pre></p>","tags":["Bash"]},{"location":"bash/variables/","title":"Variables de shell","text":"<p>Las variables de Bash son elementos que almacenan valores, los cuales pueden ser leidos y tambi\u00e9n modificados.</p> <p>Si se crearan procesos derivados del peoceso o shell (terminal) actual \u00e9stos ser\u00edan incapaces de tener acceso a estas variables,  por eso se la suele llamar variables de shell.</p>","tags":["Bash"]},{"location":"bash/variables/#creacion","title":"Creacion","text":"<p>Las variables en Bash se crean al asignarle un valor con el operador <code>=</code>:</p> <pre><code>variable=valor\n</code></pre> <p>Hay que tener cuidado de no dejar nunca espacios en blanco alrededor del signo <code>=</code> para permitir la asignaci\u00f3n del valor.</p> <p>Sin embargo, las variables pueden ser creadas sin valor dejando en blanco el miembro derecho de la asignaci\u00f3n:</p> <pre><code>variable=\n</code></pre>","tags":["Bash"]},{"location":"bash/variables/#entrada-por-teclado","title":"Entrada por teclado","text":"<p>Para recibir un valor ingresado por el usuario y guardarlo en una variable se usa el comando <code>read</code>: <pre><code>read variable\n</code></pre></p>","tags":["Bash"]},{"location":"bash/variables/#salida-por-terminal","title":"Salida por terminal","text":"<p>Y para leerlo en pantalla se llama a la variable con el signo $ adelante: <pre><code>echo $variable\n</code></pre></p> <p>Ejemplo: edad de usuario</p> <pre><code>echo \"\u00bfTu edad?\"\nread  age\necho \"Tienes $age a\u00f1os\"\n</code></pre>","tags":["Bash"]},{"location":"bash/variables/#copia","title":"Copia","text":"<p>La copia de valores se hace con ayuda del operador <code>=</code>.</p>","tags":["Bash"]},{"location":"bash/variables/#valor-simple","title":"Valor simple","text":"<p>El valor de las variables se lee anteponiendo el operador <code>$</code>. Por ejemplo, para copiar el valor a una nueva variable: </p> <pre><code>nueva_variable=$variable\n</code></pre> <p>O tambi\u00e9n:</p> <pre><code>nueva_variable=${variable}\n</code></pre>","tags":["Bash"]},{"location":"bash/variables/#valor-predefinido","title":"Valor predefinido","text":"<p>A las variables se les puede asignar un valor por defecto para cuando no est\u00e9n definidas de antemano:</p> <pre><code>nueva_variable=${variable:-valor_defecto}\n</code></pre> <p>Por ejemplo, si la variable <code>PI</code> no est\u00e1 predefinida le podemos asignar una aproximaci\u00f3n de 3 d\u00edgitos como valor predefinido:</p> <p><pre><code>PI=${PI:-3.14}\necho $PI    # da '3.14'\n</code></pre> Pero si a la variable se le asigna previamente otro valor no nulo entonces \u00e9ste ser\u00e1 el valor final:</p> <pre><code>PI=3.141592\nPI=${PI:-3.14}\necho $PI    # ahora da '3.141592'\n</code></pre>","tags":["Bash"]},{"location":"bash/variables/#valor-con-error","title":"Valor con error","text":"<p>Esta opci\u00f3n dispara una rutina de error en caso que la variable no tenga valor preasignado.</p> <p>Ejemplo:</p> <p><pre><code>PI=${PI:? 'Error: variable no inicializada' }\n</code></pre> en este caso se lanza el mensaje indicado entre comillas.</p>","tags":["Bash"]},{"location":"bash/variables/#valor-alternativo","title":"Valor alternativo","text":"<p>Esta opci\u00f3n reemplaza el valor de una variable si \u00e9sta ya tiene valor:</p> <p><pre><code>PI=3.141592\nPI=${PI:+3.14}\necho $PI    # ahora da '3.14'\n</code></pre> Si la variable de entrada no tiene valor entonces esta asignacion no hace nada:</p> <pre><code>PI=\nPI=${PI:+3.14}\necho $PI    # (vac\u00edo)\n</code></pre>","tags":["Bash"]},{"location":"bash/variables/#interpolacion","title":"Interpolaci\u00f3n","text":"<p>La interpolaci\u00f3n permite concatenar valores de variables con valores fijos o con valores de otras variables. Hay dos opciones: la expansi\u00f3n de par\u00e1metros y la sustituci\u00f3n de comandos.</p>","tags":["Bash"]},{"location":"bash/variables/#expansion-de-parametros","title":"Expansi\u00f3n de par\u00e1metros","text":"<p>La expansi\u00f3n de par\u00e1metros permite  agregar contenido a las variables. Usa las llaves (<code>{}</code>) para componer el valor de salida.</p> <p>En este ejemplo a la variable indicada se le agrega la palabra \"Mundo\" al final:</p> <pre><code>variable=\"Hola\"\necho ${variable}Mundo   # da 'HolaMundo'\n</code></pre>","tags":["Bash"]},{"location":"bash/variables/#sustitucion-de-comandos","title":"Sustituci\u00f3n de comandos","text":"<p>La sustituci\u00f3n de comandos consiste en el reemplazo de un comando por su valor de salida.  Suelen utilizarse los par\u00e9ntesis (<code>()</code>) para englobar los comandos.</p> <p>Por ejemplo: para leer el valor de la fecha actual con el comando <code>date</code> y guardarla en una variable:</p> <pre><code>fecha_hoy=$(date)\n</code></pre> <p>Una alternativa equivalente es el uso de las comillas inclinadas (``) para rodear los comandos:</p> <pre><code>fecha_hoy=`date`\n</code></pre> <p>Otro ejemplo es el guardado de los ficheros y subdirectorios encontrados con el comando <code>ls</code>:</p> <pre><code>encontrados=$(ls -a)    # uso parentesis\nencontrados=`ls -a`     # uso comillas inclinadas\n</code></pre>","tags":["Bash"]},{"location":"bash/variables/#propiedades-especificas","title":"Propiedades espec\u00edficas","text":"<p>A las variables se las puede declarar con propiedades espec\u00edficas mediante el comando declare: <pre><code>declare opcion variable\n</code></pre></p> <p>Algunas de las opciones disponibles del comando son las siguientes:</p> Opci\u00f3n Significado Opci\u00f3n inversa <code>-r</code> s\u00f3lo lectura (read only) <code>+r</code> <code>-i</code> convierte a enteros (integer) <code>+i</code> <code>-u</code> convierte a may\u00fasculas (uppercase ) <code>+u</code> <code>-l</code> convierte a min\u00fasculas (lowercase) <code>+l</code> <code>-x</code> exportaci\u00f3n a procesos hijos <code>+x</code> <code>-n</code> es referencia a otra variable (\"apuntador\") <code>+n</code> <p>Por ejemplo, para interpretar un <code>string</code> como n\u00famero o incluso como operaci\u00f3n aritm\u00e9tica se usa la opci\u00f3n <code>-i</code>:</p> <p>para forzar  <pre><code>declare -i multiplicar=\"3*2\"\n</code></pre> Lo cual es equivalente a: <pre><code>multiplicar=$((3*2))\n</code></pre></p> <p>Las opciones inversas existen para anular las opciones preasignadas a una varible ya creada.</p> <p>Ejemplo: una variable que contiene s\u00f3lo texto en may\u00fasculas (<code>-u</code>):</p> <pre><code># opci\u00f3n mayusculas\ndeclare -u hola=\"hola mundo\"\necho $hola      # 'HOLA MUNDO'\n</code></pre> <p>La opci\u00f3n se quita con su opci\u00f3n opuesta (<code>+u</code>):</p> <pre><code>declare +u hola=\"hola mundo\"\necho $hola      # 'hola mundo'\n</code></pre>","tags":["Bash"]},{"location":"bash/variables/#referencias","title":"Referencias","text":"<p>Delf Stack - Interpolaci\u00f3n de variables en Bash Script</p> <p>Docker Docs - Set, use, and manage variables in a Compose file with interpolation </p> <p>LinuxSimply - String Interpolation in Bash [4 Methods]</p> <p>PhoenixNAP - Bash declare Statement: Syntax and Examples</p>","tags":["Bash"]},{"location":"bash/verificar/","title":"Verificar ficheros","text":"<p>Con el comando <code>test</code>se verifica </p> <p>Para revisar si un archivo o carpeta existe se puede usar el comando <code>test</code> con las opciones <code>-d</code> y <code>-f</code>: <pre><code>test -f nombre_fichero        # verificar archivo\ntest -d nombre_directorio     # verificar carpeta\n</code></pre></p> Command Description -e archivo o carpeta existente -f archivo existente -d carpeta existente -s archivo con espacio mayor a 0 -L es un enlace -S es un socket -x archivo con permisos de ejecucion <p>ejemplo de uso: condicionales if <pre><code># verificar existencia carpeta\nif [ -d $carpeta ] \nthen\n    echo \"$carpeta existe\"\nfi\n# verificar existencia archivo\nif [ -f $archivo ]\nthen\n    echo \"$archivo existe\"\nfi\n</code></pre></p>","tags":["Bash"]},{"location":"bash/verificar/#referencias","title":"Referencias:","text":"<p>Linux Handbook - Using test Command in Bash Scripts</p>","tags":["Bash"]},{"location":"linux/dnf/","title":"DNF","text":"<p>DNF es el gestor de paquetes usado en Fedora.</p>","tags":["Linux","GNU","Fedora"]},{"location":"linux/dnf/#actualizaciones-generales","title":"Actualizaciones generales","text":"<p>Actualizar sistema <pre><code>sudo dnf update \nsudo dnf upgrade \n</code></pre></p> <p>Borrar cach\u00e9 <pre><code>sudo dnf clean all\n</code></pre></p> <p>Borrar paquetes hu\u00e9rfanos (usar con cuidado) <pre><code>sudo dnf autoremove\n</code></pre></p>","tags":["Linux","GNU","Fedora"]},{"location":"linux/dnf/#listados","title":"Listados","text":"<p>Listar paquetes</p> <pre><code>sudo dnf list \nsudo dnf list all\nsudo dnf list installed\nsudo dnf list available\n</code></pre> <p>Buscar paquete en repositorios</p> <pre><code>sudo dnf search &lt;paquete&gt;\n</code></pre> <p>Mostrar paquetes con un patr\u00f3n:</p> <pre><code>sudo dnf list *&lt;patron&gt;*\nsudo dnf list *&lt;patron&gt;* installed\nsudo dnf list *&lt;patron&gt;* available\n</code></pre>","tags":["Linux","GNU","Fedora"]},{"location":"linux/dnf/#manipular-paquetes","title":"Manipular paquetes","text":"<p>Instalar paquete: <pre><code>sudo dnf install &lt;paquete&gt;\nsudo dnf update &lt;paquete&gt;\nsudo dnf remove &lt;paquete&gt;\nsudo dnf erase &lt;paquete&gt;\n</code></pre></p> <p>Reinstalar paquete</p> <pre><code>sudo dnf reinstall &lt;paquete&gt;\n</code></pre> <p>Actualizar a una versi\u00f3n espec\u00edfica</p> <pre><code>sudo dnf upgrade-to &lt;paquete_version&gt;\n</code></pre> <p>Actualizar paquetes a \u00faltima versi\u00f3n estable</p> <pre><code>sudo dnf distro-sync\n</code></pre>","tags":["Linux","GNU","Fedora"]},{"location":"linux/dnf/#proveedores-de-paquetes","title":"Proveedores de paquetes","text":"<p>Mostrar repositorios disponibles</p> <pre><code>sudo dnf repolist       # habilitados\nsudo dnf repolist all   # todos\n</code></pre> <p>Informacion de proveedores para un paquete</p> <pre><code>sudo dnf provides &lt;paquete&gt;\n</code></pre> <p>Instalar paquete desde repositorio especifico</p> <pre><code>sudo dnf install --enablerepo=&lt;repositorio&gt; paquete\n</code></pre>","tags":["Linux","GNU","Fedora"]},{"location":"linux/dnf/#grupos","title":"Grupos","text":"<p>Listar grupos</p> <pre><code>sudo dnf group list\n</code></pre> <p>Informaci\u00f3n de grupo</p> <pre><code>sudo dnf group info \"&lt;nombre grupo&gt;\"\n</code></pre> <p>Instalar grupo</p> <pre><code>sudo dnf group install \"&lt;nombre_grupo&gt;\"\nsudo dnf group remove  \"&lt;nombre_grupo&gt;\"\n</code></pre>","tags":["Linux","GNU","Fedora"]},{"location":"linux/dnf/#paquetes-locales","title":"Paquetes locales","text":"<p>Instalar paquete desde binario</p> <pre><code>sudo dnf install ruta_archivo\n</code></pre>","tags":["Linux","GNU","Fedora"]},{"location":"linux/dnf/#historial","title":"Historial","text":"<p>Historial de comandos</p> <pre><code>sudo dnf history\n</code></pre>","tags":["Linux","GNU","Fedora"]},{"location":"linux/dnf/#ayuda","title":"Ayuda","text":"<p>Ayuda</p> <pre><code>dnf help\n</code></pre>","tags":["Linux","GNU","Fedora"]},{"location":"linux/dnf/#referencias","title":"Referencias","text":"<p>GeekFlare - DNF intro</p> <p>Linux Party - 26 comandos de DNF</p>","tags":["Linux","GNU","Fedora"]},{"location":"linux/estructura_directorios/","title":"Estructura de directorios en Linux","text":"","tags":["Linux","GNU"]},{"location":"linux/estructura_directorios/#introduccion","title":"Introducci\u00f3n","text":"<p>La mayor\u00eda de las distribuciones GNU/Linux tienen un reparto de sus directorios parecido.</p> Estructura - Fedora<pre><code>/\n\u251c\u2500\u2500 afs\n\u251c\u2500\u2500 bin -&gt; usr/bin\n\u251c\u2500\u2500 boot\n\u251c\u2500\u2500 dev\n\u251c\u2500\u2500 etc\n\u251c\u2500\u2500 home\n\u251c\u2500\u2500 lib -&gt; usr/lib\n\u251c\u2500\u2500 lib64 -&gt; usr/lib64\n\u251c\u2500\u2500 lost+found\n\u251c\u2500\u2500 media\n\u251c\u2500\u2500 mnt\n\u251c\u2500\u2500 opt\n\u251c\u2500\u2500 proc\n\u251c\u2500\u2500 root\n\u251c\u2500\u2500 run\n\u251c\u2500\u2500 sbin -&gt; usr/sbin\n\u251c\u2500\u2500 srv\n\u251c\u2500\u2500 sys\n\u251c\u2500\u2500 tmp\n\u251c\u2500\u2500 usr\n\u2514\u2500\u2500 var\n</code></pre>","tags":["Linux","GNU"]},{"location":"linux/estructura_directorios/#ejecutables","title":"Ejecutables","text":"<ul> <li> <p><code>/bin</code>      Binarios.     Comandos para todos los usuarios:     <code>ls</code>, <code>cp</code>, <code>mv</code> , etc.</p> </li> <li> <p><code>/sbin</code></p> <p>Binarios. Reservado para tareas administrativas.</p> </li> <li> <p><code>/opt</code></p> <p>Software adicional o de terceros instalado manualmente.  Es ideal para programas que no forman parte del sistema base.</p> </li> <li> <p><code>/lib</code> y <code>/lib64</code></p> <p>Bibliotecas compartidas esenciales para los  binarios en <code>/bin</code> y <code>/sbin</code>. </p> </li> <li> <p><code>/usr</code></p> <p>Contiene aplicaciones y utilidades para usuarios. </p> <ul> <li> <p><code>/usr/bin</code>: Archivos binarios. </p> </li> <li> <p><code>/usr/lib</code>: Bibliotecas. </p> </li> </ul> </li> </ul>","tags":["Linux","GNU"]},{"location":"linux/estructura_directorios/#arranque","title":"Arranque","text":"<ul> <li> <p><code>/boot</code></p> <p>Archivos para el arranque del sistema.  Incluye l kernel y las configuraciones del gestor de arranque.</p> </li> </ul>","tags":["Linux","GNU"]},{"location":"linux/estructura_directorios/#hardware","title":"Hardware","text":"<ul> <li> <p><code>/dev</code></p> <p>Representa los dispositivos de hardware del sistema, como discos duros, terminales y puertos USB.  Cada dispositivo tiene un archivo asociado en este directorio.</p> <ul> <li><code>dev/shm</code> Memoria RAM accesible. Puede usarse como un un directorio cualquiera.</li> </ul> </li> </ul>","tags":["Linux","GNU"]},{"location":"linux/estructura_directorios/#configuracion","title":"Configuraci\u00f3n","text":"<ul> <li> <p><code>/etc</code></p> <p>Archivos de configuraci\u00f3n del sistema  y de las aplicaciones instaladas.</p> </li> </ul>","tags":["Linux","GNU"]},{"location":"linux/estructura_directorios/#directorios-personal","title":"Directorios personal","text":"<ul> <li> <p><code>/home</code></p> <p>Directorios personales de los usuarios, con sus archivos y configuraciones.</p> </li> </ul>","tags":["Linux","GNU"]},{"location":"linux/estructura_directorios/#montajes","title":"Montajes","text":"<ul> <li> <p><code>/mnt</code> y <code>/media</code></p> <p>Ambas carpetas est\u00e1n relacionadas con el montaje de sistemas de archivos. </p> <ul> <li> <p><code>/mnt</code>: Montaje de discos.</p> </li> <li> <p><code>/media</code>: Montaje de dispositivos externos: discos \u00f3pticos, USB's, etc. </p> </li> </ul> </li> </ul>","tags":["Linux","GNU"]},{"location":"linux/estructura_directorios/#procesos-y-sistema-operativo","title":"Procesos y sistema operativo","text":"<ul> <li> <p><code>/proc</code> y <code>/sys</code></p> <p>Ambos son sistemas de archivos virtuales que proporcionan informaci\u00f3n sobre el kernel y el hardware. </p> <ul> <li> <p><code>/proc</code>:     muestra a todos los procesos del sistema     como archivos.</p> </li> <li> <p><code>/sys</code>:     muestra las configuraciones del hardware y del kernel.</p> </li> </ul> </li> </ul>","tags":["Linux","GNU"]},{"location":"linux/estructura_directorios/#archivos-temporales","title":"Archivos temporales","text":"<ul> <li> <p><code>/tmp</code>:</p> <p>Archivos temporales que se eliminan habitualmente tras el reinicio.</p> </li> <li> <p><code>/var</code>:</p> <p>Datos auxiliares con mayor persistencia: - registros del sistema (logs); - colas de impresi\u00f3n; - archivos temporales persistentes.</p> </li> </ul>","tags":["Linux","GNU"]},{"location":"linux/estructura_directorios/#run","title":"<code>/run</code>","text":"<p>?????</p>","tags":["Linux","GNU"]},{"location":"linux/estructura_directorios/#referencias","title":"Referencias","text":"<p>SoplosLinux - Sistema de archivos en Linux</p>","tags":["Linux","GNU"]},{"location":"linux/montar_discos/","title":"Montar discos ISO","text":"","tags":["Linux","GNU"]},{"location":"linux/montar_discos/#crear-ruta-para-el-iso","title":"Crear ruta para el ISO","text":"<p>El primer paso es crear la carpeta para el montaje: comando mkdir con permisos de administrador. <pre><code>sudo mkdir /mnt/iso\n</code></pre> '/mnt/iso' es una ruta muy habitual para este uso.</p>","tags":["Linux","GNU"]},{"location":"linux/montar_discos/#montar-imagen","title":"Montar imagen","text":"<p>Se realiza la operacion de montaje en el directorio elegido. Comando mount</p> <p><pre><code>sudo mount -o loop &lt;ruta_imagen&gt;.iso /mnt/iso\n</code></pre> Con ello el contenido de la ISO estar\u00e1 disponible para su uso.</p>","tags":["Linux","GNU"]},{"location":"linux/montar_discos/#desmontar-imagen","title":"Desmontar imagen","text":"<p>Cuando la imagen de disco ya no es necesaria es conveniente desmontarla para liberar recursos. Comando umount:</p> <pre><code>sudo umount /mnt/iso\n</code></pre> <p>https://tututorial.org/como-montar-y-desmontar-una-imagen-iso-dentro-de-linux-instalar-un-programa/</p>","tags":["Linux","GNU"]},{"location":"linux/path_ejecutables/","title":"PATH y Ejecutables","text":"","tags":["Linux","GNU"]},{"location":"linux/path_ejecutables/#buscar-ejecutable","title":"Buscar ejecutable","text":"<p>Los archivos ejecutables pueden ser buscados f\u00e1cilmente con el comando which: <pre><code>which &lt;nombre_ejecutable&gt;\n</code></pre></p> <p>Por ejemplo, si se busca el programa VSCodium:</p> <pre><code>which codium\n</code></pre> <p>Este comando puede buscar varios ejecutables al mismo tiempo:</p> <pre><code>which python mysql\n</code></pre> <p>Para listar todas las ubicaciones de un mismo ejecutable usar la opci\u00f3n -a</p> <pre><code>which -a python \n</code></pre> <p>Importante: which busca siempre a los ejecutables en las rutas configuradas dentro de la variable $PATH (variable de entorno del sistema operativo).  Si el ejecutable no est\u00e1 en un directorio registrado en $PATH \u00e9ste no aparecer\u00e1.</p>","tags":["Linux","GNU"]},{"location":"linux/path_ejecutables/#anadir-a-path","title":"A\u00f1adir a PATH","text":"<p>Si se necesita a\u00f1adir un directorio a la variable PATH , por ejemplo si se necesita ejecutar un programa guardado en una carpeta no habital, este se a\u00f1ade  <pre><code>export PATH=$PATH:/&lt;ruta_directorio&gt;\n</code></pre></p> <p>https://professor-falken.com/linux/como-localizar-un-archivo-ejecutable-con-un-simple-comando-en-linux/</p> <p>https://www.sysadmit.com/2016/06/linux-anadir-ruta-al-path.html</p>","tags":["Linux","GNU"]},{"location":"linux/permisos_usuario/","title":"Permisos de <code>sudo</code>","text":""},{"location":"linux/permisos_usuario/#ejecutar-con-permisos-de-administrador","title":"Ejecutar con permisos de administrador","text":"<pre><code>sudo comando\n</code></pre> <p>Por defecto <code>sudo</code> ejecuta el comando como usuario <code>root</code> (id 0) .</p>"},{"location":"linux/permisos_usuario/#ejecutar-como-otro-usuario","title":"Ejecutar como otro usuario","text":"<pre><code>sudo -u nombre_usuario comando\n</code></pre>"},{"location":"linux/permisos_usuario/#modificar","title":"Modificar","text":"<p>Hay dos maneras de configurar los usuarios como <code>sudo</code>:</p> <ul> <li>Modificar el archivo <code>/etc/sudoers</code>,  que es la m\u00e1s riesgosa porque puede inutilizar la funcionalidad de <code>sudoers</code> completa  en caso de de hacerse mal;</li> <li>Crear un archivo en la carpeta <code>/etc/sudoers.d/</code>.  Esta es la forma m\u00e1s segura y c\u00f3moda porque pueden hacerse m\u00faltiples archivos para configurar distintos usuarios, comandos, et. de forma independiente.</li> </ul>"},{"location":"linux/permisos_usuario/#sintaxis-general","title":"Sintaxis general","text":"<p>Cada opci\u00f3n se registra con la siguiente sintaxis general:</p> <pre><code>nombre_usuarios  nombres_hosts=(usuarios_habilitados)  lista_comandos\n</code></pre> <p>Los campos que aparecen son los siguientes: </p> <ul> <li><code>nombre_usuarios</code> es la lista de nombre de los usuarios que se busca configurar;</li> <li><code>nombres_hosts</code> es la lista de equipos (personales, servidores, etc) donde se ejecutar\u00e1n los comandos;</li> <li><code>usuarios_habilitados</code> </li> <li><code>lista_comandos</code> es la lista de rutas a los ejecutables que son configurados, separadas por comas.</li> </ul> <p>ALL</p> <p>Es muy habitual usar la palabra <code>ALL</code> como comod\u00edn cuando hay que agrupar a todos los elementos de la categor\u00eda.</p>"},{"location":"linux/permisos_usuario/#habilitar-usuario","title":"Habilitar usuario","text":"<p>Para habilitar a un usuario particular a ejecutar uno o varios comandos particulares:</p> <pre><code>nombre_usuarios  nombres_hosts=(usuarios_habilitados)  ruta_comando_1, ruta_comando_2, ...\n</code></pre> <p>en tanto que para deshabilitar a un usuario a ejecutar dichos comandos se los antecede con el signo <code>!</code></p> <pre><code>nombre_usuarios  nombres_hosts=(usuarios_habilitados)  !ruta_comando_1, !ruta_comando_2, ...\n</code></pre>"},{"location":"linux/permisos_usuario/#alias","title":"Alias","text":"<p>Los alias son elementos auxiliares que sirven para agrupar usuarios, hosts y comandos</p> <pre><code>User_Alias  nombre_alias = usuario_1, usuario_2, ...\nCmnd_Alias  nombre_alias = ruta_comando_1, ruta_comando_2, ...\nHost_Alias  nombre_alias = servidor_1, servidor_2, ...\n</code></pre>"},{"location":"linux/permisos_usuario/#habilitar-uso-como-sudo-sin-contrasena","title":"Habilitar uso como sudo sin contrase\u00f1a","text":"<pre><code>ALL ALL=(ALL) NOPASSWD: ruta_comando\n</code></pre>"},{"location":"linux/permisos_usuario/#referencias","title":"Referencias","text":"<p>GoLinuxCLoud - How to add user to sudoers with best practices &amp; examples</p> <p>Linux-Console.net - Sudo: permitir comando sin contrase\u00f1a</p>"},{"location":"linux/servicios_inicio/","title":"Agregar servicios al inicio","text":"","tags":["Linux","GNU","Debian","Arch","Fedora"]},{"location":"linux/servicios_inicio/#systemd","title":"Systemd","text":"","tags":["Linux","GNU","Debian","Arch","Fedora"]},{"location":"linux/servicios_inicio/#crear-archivo-de-servicio","title":"Crear archivo de servicio","text":"<pre><code>[Unit]\nDescription=Script service\nAfter=network.target network-online.target\nWants=network-online.target\n\n[Service]\nExecStart=/home/x/Codigos/led_teclado.sh \n\n[Install]\nWantedBy=multi-user.target\n</code></pre>","tags":["Linux","GNU","Debian","Arch","Fedora"]},{"location":"linux/servicios_inicio/#copiar-archivo","title":"Copiar archivo","text":"<pre><code>sudo cp leds_teclado.service  /etc/systemd/system/leds_teclado.service\n</code></pre>","tags":["Linux","GNU","Debian","Arch","Fedora"]},{"location":"linux/servicios_inicio/#hablilitar","title":"Hablilitar","text":"<pre><code>sudo systemctl enable leds_teclado\n</code></pre>","tags":["Linux","GNU","Debian","Arch","Fedora"]},{"location":"linux/servicios_inicio/#ejecucion-manual","title":"Ejecucion manual","text":"<pre><code>sudo systemctl start leds_teclado\n</code></pre>","tags":["Linux","GNU","Debian","Arch","Fedora"]},{"location":"linux/servicios_inicio/#estado-actual","title":"Estado actual","text":"<pre><code>systemctl status leds_teclado\n</code></pre> <p>ComputerWage- Scripting en Linux (V): Bash. Ejecutar un Script en el Inicio o Apagado</p>","tags":["Linux","GNU","Debian","Arch","Fedora"]},{"location":"linux/signals/","title":"Se\u00f1ales","text":"<p>Las se\u00f1ales son una forma de comunicar procesos del sistema operativo. Muchas de las se\u00f1ales tienen como funcionalidad predeterminada el cierre del proceso receptor.</p>","tags":["Linux","GNU","Debian","Arch","Fedora"]},{"location":"linux/signals/#senales-predefinidas","title":"Se\u00f1ales predefinidas","text":"<p>Con la opci\u00f3n <code>-l</code> del comando <code>trap</code> se puede consultar el nombre clave de las se\u00f1ales y su n\u00famero equivalente:</p> <pre><code>trap -l\n</code></pre> <p>En Linux hay 62 se\u00f1ales predefinidas.</p>","tags":["Linux","GNU","Debian","Arch","Fedora"]},{"location":"linux/signals/#envio-de-senales","title":"Env\u00edo de se\u00f1ales","text":"<p>Las se\u00f1ales se env\u00edan a un proceso destino en base a su n\u00famero identificador o PID con ayuda del comando <code>kill</code>:</p> <pre><code>kill -NOMBRE_SENIAL  pid_destino\nkill -NUMERO_SENIAL  pid_destino\n</code></pre> <p>Por ejemplo, si se desea enviar la se\u00f1al <code>SIGUSR1</code> (se\u00f1al N\u00ba 10) a un proceso espec\u00edfico puede hacer:</p> <pre><code>kill -SIGUSR1  pid_destino\nkill -10       pid_destino\n</code></pre> <p>Si no se indica el nombre ni el n\u00famero de se\u00f1al deseada entonces se env\u00eda la se\u00f1al <code>SIGKILL</code>,  que es la que le da nombre al comando.</p> <p>PID actual</p> <p>El PID de la actual rutina se guarda en la variable de entorno <code>$</code>. Su valor se consulta colocando otro signo <code>$</code> adelante, como con cualquier variable.</p> <p><pre><code>mi_pid=$$\necho $mi_pid\n</code></pre> <pre><code>echo $$\n</code></pre></p> <p>TIP: consultar PID de proceso</p> <p>El comando <code>pgrep</code> ayuda a encontrar el n\u00famero de PID de un proceso o rutina en ejecuci\u00f3n en base a su nombre completo o parcial.  Este n\u00famero se puede guardar en una variable:</p> <p><pre><code>pid=`pgrep parte_nombre_proceso`\n</code></pre> y pasarlo al comando <code>kill</code> como argumento:</p> <pre><code>kill -NOMBRE_SENIAL $pid\n</code></pre> <p>Si hay varias coincidencias <code>pgrep</code>  devuelve varios n\u00fameros de PID al mismo tiempo.</p>","tags":["Linux","GNU","Debian","Arch","Fedora"]},{"location":"linux/signals/#capturar-senales","title":"Capturar se\u00f1ales","text":"<p>El comando <code>trap</code> sirve tambi\u00e9n para consultar y configurar la captura de distintas se\u00f1ales. Esto permite cambiar el comportamiento de las rutinas al recibir una se\u00f1al espec\u00edfica.</p> <p>La asignaci\u00f3n de una rutina a ejecutarse ante una se\u00f1al:</p> <p><pre><code>trap 'instruccion_1; intruccion_2; intruccion_3' NOMBRE_SENIAL\n</code></pre> La rutina deseada se asigna entre comillas simples o dobles.</p> <p>Consultar todas las capturas:</p> <pre><code>trap\n</code></pre> <p>Consultar la captura de una se\u00f1al espec\u00edfica: opci\u00f3n <code>-p</code></p> <pre><code>trap -p NOMBRE_SENIAL\n</code></pre> <p>Reestablecer el comportamiento de una se\u00f1al: opcion <code>-</code> (vac\u00edo)</p> <pre><code>trap - NOMBRE_SENIAL\n</code></pre> <p>SIGUSR2</p> <p>En este ejemplo configura un mensaje  para ser mostrado por la terminal al recibir la se\u00f1al <code>SIGUSR2</code>:</p> <p><pre><code># rutina: mostrar mensaje en pantalla\ntrap 'echo \"se\u00f1al SIGUSR2 recibida\"' SIGUSR2\n</code></pre> El cual puede dispararse desde la misma terminal:</p> <pre><code># test\nkill -SIGUSR2 $$\n</code></pre> <p>En este otro ejemplo la terminal esperar\u00e1 5 segundos antes de cerrarse:</p> <pre><code># rutina: mostrar mensaje en pantalla y cerrar\ntrap 'echo \"se\u00f1al SIGUSR2 recibida\"; echo \"cerrando...\"; sleep 5; exit' SIGUSR2\n</code></pre> <p>SIGKILL</p> <p>Esta se\u00f1al es la \u00fanica que no puede ser reconfigurada y que obliga al cierre del proceso receptor y sus procesos hijos.</p>","tags":["Linux","GNU","Debian","Arch","Fedora"]},{"location":"linux/signals/#manejadores-handlers","title":"Manejadores (handlers)","text":"<p>En el caso de usar scripts las instrucciones para captura de se\u00f1ales  debe agregarse lo m\u00e1s cerca posible del inicio de c\u00f3digo  para asegurar que la correcta configuraci\u00f3n.</p> <p>Las rutinas pueden englobarse en handlers (funciones manejadoras)</p> <pre><code>trap handler_senial_1 NOMBRE_SENIAL_1\ntrap handler_senial_2 NOMBRE_SENIAL_2 \n</code></pre> <p>y \u00e9stos manejadores pueden a su vez afectar a m\u00faltiples se\u00f1ales al mismo tiempo:</p> <pre><code>trap handler_senial NOMBRE_SENIAL_1 NOMBRE_SENIAL_2 NOMBRE_SENIAL_3\n</code></pre> <p>Los handlers se definen con la sintaxis:</p> <pre><code>handler_senial()\n{\n    # rutina\n    echo \"Se\u00f1al recibida\"\n}\n</code></pre> <p>Es posible definir los handlers de manera que puedan operar con variables del programa.  Para ello se definen con la cl\u00e1usula <code>function</code>.  Por ejemplo, para hacer un manejador que cuente</p> <pre><code>function handler_senial() {\n    ((++contador))\n    echo -e \"Se\u00f1al recibida $contador veces\"\n\n}\n</code></pre> <p>o tambi\u00e9n se puede hacer:</p> <pre><code>function handler_senial() {\n    echo \"Se\u00f1al recibida $((++contador)) veces \"\n}\n</code></pre> <p>Autoincremental</p> <pre><code>#! /bin/bash\n\ntrap handler_usuario SIGUSR1 SIGUSR2\n\nfunction handler_usuario(){\n    ((++contador))\n    echo \"Se\u00f1ales recibidas $contador veces.\"\n}\n\necho \"PID actual:\"\necho $$\n\ncontador=0\n\n# autoenvio de se\u00f1ales\nwhile true\ndo \n    kill -SIGUSR1 $$\n    sleep 1\ndone\n</code></pre>","tags":["Linux","GNU","Debian","Arch","Fedora"]},{"location":"linux/signals/#referencias","title":"Referencias","text":"<p>Linux-Console.net - C\u00f3mo usar se\u00f1ales de Linux en scripts Bash</p> <p>Linux-Console.net - C\u00f3mo usar SIGINT y otras se\u00f1ales de terminaci\u00f3n en Linux</p>","tags":["Linux","GNU","Debian","Arch","Fedora"]}]}